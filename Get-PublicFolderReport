Function Get-PublicFolderReport {
<#
.Synopsis
   Get-PublicFolderReport creates a report for PublicFolder Databases. 
.DESCRIPTION
   Get-PublicFolderReport is an advanced function cmdlet that queries Public Folder Databases in Exchange 2010. If you have multiple versions of Exchange in your environment for example Exchange 2003 or Exchange 2007 you may use the -IncludePreExchange2010 switch parameter to include preExchange2010 databases.
.EXAMPLE
    Get-PublicFolderReport -Identity PUBDB1

    Server                 : EX01
    Public Folder Database : PUBDB1
    Item Count             : 665860
    Deleted Item Count     : 249
    Database Size          : 172.8 GB (185,497,354,240 bytes)
    White Space            : 43.31 MB (45,416,448 bytes)

    This examples shows how to use the cmdlet requesting a specific Public Folder Database.
.EXAMPLE
   Get-PublicFolderReport -Identity PUBDB1, PUBDB2


    Server                 : EX01
    Public Folder Database : PUBDB1
    Item Count             : 665860
    Deleted Item Count     : 249
    Database Size          : 172.8 GB (185,497,354,240 bytes)
    White Space            : 41.31 MB (43,319,296 bytes)

    Server                 : EX02
    Public Folder Database : PUBDB2
    Item Count             : 666210
    Deleted Item Count     : 361
    Database Size          : 173.1 GB (185,900,007,424 bytes)
    White Space            : 127.3 MB (133,529,600 bytes)

    This examples shows how to use the cmdlet requesting multiple Public Folder Databases.
.EXAMPE
    Get-PublicFolderReport -Server SCEA0XM21


    Server                 : SCEA0XM21
    Public Folder Database : PUBDB2
    Item Count             : 666211
    Deleted Item Count     : 361
    Database Size          : 173.1 GB (185,900,007,424 bytes)
    White Space            : 130.4 MB (136,708,096 bytes)


    This example shows how to use the cmlet requesting a all Public Folder Database from a server. 
.INPUTS
   Inputs to this cmdlet (if any)
.OUTPUTS
   Output from this cmdlet (if any)
.NOTES
   General notes
.COMPONENT
   The component this cmdlet belongs to
.ROLE
   The role this cmdlet belongs to
.FUNCTIONALITY
   The functionality that best describes this cmdlet
#>
    [CmdletBinding()]
    Param
    (
        # The Identity parameter specifies a public folder database. You can use the following values:
        # * GUID
        # * Distinguished name (DN)
        # * Database name
        # If you don't specify the server name, the cmdlet searches for public folder databases on the local server. If you have multiple databases with the same name, the cmdlet retrieves all
        # databases with the same name in the specified scope.
        # This parameter cannot be used with the Server parameter.
        [Parameter(Mandatory=$False,
                   ParameterSetName="Identity",
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        [Alias("DatabaseName",
               "Database")] 
        [string[]]$Identity,

        # The Server parameter specifies the name of a server that contains a public folder database; by default Server paramter is LocalHost. If specified, only the public folder databases on the specified server/s ares returned.
        # This parameter cannot be used with the Identity parameter.

        [Parameter(Mandatory=$False,
                   ParameterSetName="Server",
                   ValueFromPipelineByPropertyName=$False,
                   Position=0)]
        [Alias("Computer",
               "ComputerName",
               "ServerName")]
        [String[]]$Server = 'LocalHost',

        # The IncludePreExchange2010 parameter specifies whether information about all the public folder databases in the organization is returned, including versions of Microsoft 
        # Exchange prior to Exchange Server 2010. If the IncludePreExchange2010 parameter is included in the command, information about all of the public folder databases in the 
        # organization is returned. This parameter isn't necessary when the Server or Identity parameter is included in the command.
        [Switch]$IncludePreExchange2010
    )
    Begin {
        If ( ! ( Get-PSSnapin | where {$_.Name -eq "Microsoft.Exchange.Management.PowerShell.E2010"} ) ) {
	        try {
		        Add-PSSnapin Microsoft.Exchange.Management.PowerShell.E2010 -ErrorAction STOP
	        }
	        catch {
		        Write-Warning $_.Exception.Message
		        EXIT
	        }
        }
        $Path = (Get-Location).Path
    }
    Process {
        If ( $Identity ) {
            ForEach ( $Database in $Identity ) {
                If ( $IncludePreExchange2010 ) {
                    Try {
                        Write-Verbose 'Obtaining Exchange 2010 and PreExchange 2010 Public Folder Databases'
                        $PFDatabase = Get-PublicFolderDatabase -Identity $Database -IncludePreExchange2010 -Status -ErrorAction STOP
                    }
                    Catch {
                        Write-Warning $_.Exception.Message
                    }
                }
                Else {
                    Try {
                        Write-Verbose 'Obtaining Exchange 2010 Public Folder Databases'
                        $PFDatabase = Get-PublicFolderDatabase -Identity $Database -Status -ErrorAction STOP
                    }
                    Catch {
                        Write-Warning $_.Exception.Message
                    }
                }
                ForEach ( $Database in $PFDatabase  ) {          
                    Write-Verbose "$($Database.Name) found on $($Database.Server.Name)"
                    Write-Verbose "Extracting data from $($Database.Name)"
                        $Data = Get-PublicFolderStatistics -Server $($Database.Server.Name) -ResultSize Unlimited | 
                        Where-Object {$_.DatabaseName -eq "$($Database.Name)"}            
                    Write-Verbose 'Data extraction completed'
                    Write-Verbose "Calculating FolderCount, Item Count and Deleted Item Count for $($Database.Name)"                                    
                        $Property = @{  "Server"                 = $Database.Server.Name
                                        "Folder Count"           = $Data.Count
                                        "Item Count"             = ($Data | Measure-Object -Property ItemCount -Sum).Sum
                                        "Deleted Item Count"     = ($Data | Measure-Object -Property DeletedItemCount -Sum).Sum
                                        "Public Folder Database" = $Database.Name
                                        "Database Size"          = $Database.DatabaseSize
                                        "White Space"            = $Database.AvailableNewMailboxSpace
                                    }                
                        $Object = New-Object -TypeName PSCustomObject -Property $Property            
                    Write-Verbose "Calculatio complete for $DatabaseName"
                    Write-Verbose 'Outputting Data'           
                        Write-Output $Object | Select "Server", "Public Folder Database", "Item Count", "Deleted Item Count", "Database Size", "White Space"        
                    Write-Verbose 'Output Successful'
                }   
            }
        }
        ElseIf ( $Server ) {
            ForEach ( $Server in $Server ) {         
                If ( $IncludePreExchange2010 ) {
                    Try {
                        Write-Verbose "'Obtaining Exchange 2010 and PreExchange 2010 Public Folder Databases from $Server"
                        $PFDatabase = Get-PublicFolderDatabase -Server $Server -IncludePreExchange2010 -Status -ErrorAction STOP
                    }
                    Catch {
                        Write-Warning $_.Exception.Message
                    }
                }
                Else {
                    Try {
                        Write-Verbose "Obtaining Exchange 2010 Public Folder Databases from $Server"
                        $PFDatabase = Get-PublicFolderDatabase -Server $Server -Status -ErrorAction STOP         
                    }
                    Catch {
                        Write-Warning $_.Exception.Message
                    }
                }
                ForEach ( $Database in $PFDatabase  ) {          
                    Write-Verbose "$($Database.Name) found on $($Database.Server.Name)"
                    Write-Verbose "Extracting data from $($Database.Name)"
                        $Data = Get-PublicFolderStatistics -Server $($Database.Server.Name) -ResultSize Unlimited | 
                        Where-Object {$_.DatabaseName -eq "$($Database.Name)"}            
                    Write-Verbose 'Data extraction completed'
                    Write-Verbose "Calculating FolderCount, Item Count and Deleted Item Count for $($Database.Name)"                                    
                        $Property = @{  "Server"                 = $Database.Server.Name
                                        "Folder Count"           = $Data.Count
                                        "Item Count"             = ($Data | Measure-Object -Property ItemCount -Sum).Sum
                                        "Deleted Item Count"     = ($Data | Measure-Object -Property DeletedItemCount -Sum).Sum
                                        "Public Folder Database" = $Database.Name
                                        "Database Size"          = $Database.DatabaseSize
                                        "White Space"            = $Database.AvailableNewMailboxSpace
                                    }                
                        $Object = New-Object -TypeName PSCustomObject -Property $Property            
                    Write-Verbose "Calculatio complete for $DatabaseName"
                    Write-Verbose 'Outputting Data'           
                        Write-Output $Object | Select "Server", "Public Folder Database", "Item Count", "Deleted Item Count", "Database Size", "White Space"        
                    Write-Verbose 'Output Successful'
                }               
            
            }
        }
    }
    End{
        Write-Verbose "Start End Block"
        Write-Verbose "Completed End Block"
    }
}
